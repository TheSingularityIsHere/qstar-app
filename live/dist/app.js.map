{
  "version": 3,
  "sources": ["../credentials.js", "../app.js"],
  "sourcesContent": ["\nexport const SUPABASE_URL = 'https://wpswezsyahxwrwzulzwd.supabase.co'\nexport const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Indwc3dlenN5YWh4d3J3enVsendkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3MzYwOTAwOTQsImV4cCI6MjA1MTY2NjA5NH0.Z2wMXSG0SQa505TWJiheoJJbS4-k6yVJn_7eTS0CdQU'\n", "// @ts-check\nimport { SUPABASE_URL, SUPABASE_ANON_KEY } from './credentials.js';\n\n// index.html maps this to \"./supabase-shim.js\" ...\nimport { SupabaseClient } from '@supabase/supabase-js';\n\n// @ts-ignore\nconst createClient = window.supabase.createClient;\n\nimport './types.js';\n\n// Initialize Supabase client\nconst /** @type {SupabaseClient} */ supabase = createClient(\n    SUPABASE_URL,\n    SUPABASE_ANON_KEY,\n    {\n        auth: {\n            autoRefreshToken: false,\n            persistSession: false\n        },\n        global: {\n            headers: {\n                'Content-Type': 'application/json',\n                'Accept': 'application/json'\n            }\n        }\n    }\n);\n\n\n// Generate or retrieve user ID from cookie\nconst getUserId = () => {\n    const cookieName = 'survey_user_id';\n    let userId = document.cookie\n        .split('; ')\n        .find(row => row.startsWith(cookieName))\n        ?.split('=')[1];\n\n    if (!userId) {\n        userId = crypto.randomUUID();\n        document.cookie = `${cookieName}=${userId}; max-age=31536000; path=/`;\n    }\n\n    return userId;\n};\n\n/** @type {string} */\nconst userId = getUserId();\n\n// Load previous responses\nconst loadPreviousResponses = async () => {\n    try {\n        const { data, error } = await supabase\n            .from('survey_responses')\n            .select()\n            .eq('user_id', userId);\n            // .single();\n\n        if (error) {\n            console.error('Error loading previous responses:', error);\n            if (error.code === '406') {\n                console.error('Content negotiation failed. Check headers and data format.');\n            } else if (error.message?.includes('CORS')) {\n                alert('CORS error detected. Please check Supabase configuration.');\n            }\n            return;\n        }\n\n        if (data.length) {\n            const /** @type {SurveyResponse} */ response = data[0];\n            console.log('got reponse', response);\n            /** @type {HTMLSelectElement} */\n            (document.getElementById('profession')).value = response.profession;\n            /** @type {HTMLSelectElement} */\n            (document.getElementById('ageRange')).value = response.age_range;\n            /** @type {HTMLInputElement} */\n            (document.getElementById('aiKnowledge')).value = response.ai_knowledge.toString();\n\n            const previousExperiments = response.previous_experiments || [];\n            previousExperiments.forEach(expNum => {\n                /** @type {HTMLInputElement} */\n                (document.getElementById(`exp${expNum}`)).checked = true;\n            });\n        }\n    } catch (error) {\n        console.error('Error:', error);\n    }\n};\n\n// Submit survey responses\nconst submitSurvey = async () => {\n    try {\n        /** @type {number[]} */\n        const previousExperiments = [1, 2, 3, 4]\n            .filter(num => /** @type {HTMLInputElement} */\n                (document.getElementById(`exp${num}`)).checked);\n\n        /** @type {SurveyResponse} */\n        const response = {\n            user_id: userId,\n            profession: /** @type {HTMLSelectElement} */\n                (document.getElementById('profession')).value,\n            age_range: /** @type {HTMLSelectElement} */\n                (document.getElementById('ageRange')).value,\n            ai_knowledge: parseInt(/** @type {HTMLInputElement} */\n                (document.getElementById('aiKnowledge')).value),\n            previous_experiments: previousExperiments,\n            submitted_at: new Date().toISOString()\n        };\n\n        const { error } = await supabase\n            .from('survey_responses')\n            .upsert({ ...response });\n\n        if (error) {\n            console.error('Error submitting survey:', error);\n            if (error.message?.includes('CORS')) {\n                alert('CORS error detected. Please check Supabase configuration.');\n            } else {\n                alert('Error submitting survey. Please try again.');\n            }\n        } else {\n            alert('Survey submitted successfully!');\n        }\n    } catch (error) {\n        console.error('Error:', error);\n        alert('An unexpected error occurred.');\n    }\n};\n\n// Subscribe to real-time updates\nconst subscribeToUpdates = () => {\n    const channel = supabase\n        .channel('survey_responses')\n        .on('postgres_changes',\n            { event: '*', schema: 'public', table: 'survey_responses' },\n            updateResults)\n        .subscribe();\n};\n\n// Update results view\nconst updateResults = async () => {\n    const { data, error } = await supabase\n        .from('survey_responses')\n        .select();\n\n    if (error) {\n        console.error('Error fetching results:', error);\n        return;\n    }\n\n    const results = {\n        professions: {},\n        ageRanges: {},\n        aiKnowledge: { 1: 0, 2: 0, 3: 0, 4: 0, 5: 0 },\n        experiments: { 1: 0, 2: 0, 3: 0, 4: 0 }\n    };\n\n    data.forEach(/** @type {SurveyResponse} */ (response) => {\n      const /** @type {SurveyResponse} */ r = response;\n        // Count professions\n        results.professions[response.profession] =\n            (results.professions[response.profession] || 0) + 1;\n\n        // Count age ranges\n        results.ageRanges[response.age_range] =\n            (results.ageRanges[response.age_range] || 0) + 1;\n\n        // Count AI knowledge levels\n        results.aiKnowledge[response.ai_knowledge]++;\n\n        // Count previous experiments\n        response.previous_experiments.forEach(expNum => {\n            results.experiments[expNum]++;\n        });\n    });\n\n    // Display results\n    const resultsDiv = document.getElementById('results');\n    if (resultsDiv) {\n        resultsDiv.innerHTML = `\n            <h3>Total Responses: ${data.length}</h3>\n\n            <h4>Professions:</h4>\n            <ul>${Object.entries(results.professions)\n                .map(([prof, count]) =>\n                    `<li>${prof}: ${count} (${Math.round(count / data.length * 100)}%)</li>`)\n                .join('')}</ul>\n\n            <h4>Age Ranges:</h4>\n            <ul>${Object.entries(results.ageRanges)\n                .map(([range, count]) =>\n                    `<li>${range}: ${count} (${Math.round(count / data.length * 100)}%)</li>`)\n                .join('')}</ul>\n\n            <h4>AI Knowledge Levels:</h4>\n            <ul>${Object.entries(results.aiKnowledge)\n                .map(([level, count]) =>\n                    `<li>Level ${level}: ${count} (${Math.round(count / data.length * 100)}%)</li>`)\n                .join('')}</ul>\n\n            <h4>Previous Experiments:</h4>\n            <ul>${Object.entries(results.experiments)\n                .map(([expNum, count]) =>\n                    `<li>Experiment #${expNum}: ${count} (${Math.round(count / data.length * 100)}%)</li>`)\n                .join('')}</ul>\n        `;\n    }\n};\n\n// Initialize application\nconst init = async () => {\n    // Check if this is the results view\n    const urlParams = new URLSearchParams(window.location.search);\n    const isResultsView = urlParams.get('view') === 'results';\n\n    if (isResultsView) {\n        /** @type {HTMLElement} */\n        (document.getElementById('surveyForm')).style.display = 'none';\n        /** @type {HTMLElement} */\n        (document.getElementById('resultsView')).style.display = 'block';\n        await updateResults();\n        subscribeToUpdates();\n    } else {\n        await loadPreviousResponses();\n        document.getElementById('submitSurvey')\n            ?.addEventListener('click', submitSurvey);\n    }\n};\n\ninit();"],
  "mappings": "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",
  "names": ["SUPABASE_URL", "SUPABASE_ANON_KEY", "createClient", "supabase", "SUPABASE_URL", "SUPABASE_ANON_KEY", "getUserId", "cookieName", "userId", "row", "loadPreviousResponses", "data", "error", "response", "expNum", "submitSurvey", "previousExperiments", "num", "subscribeToUpdates", "channel", "updateResults", "results", "r", "resultsDiv", "prof", "count", "range", "level", "init"]
}
